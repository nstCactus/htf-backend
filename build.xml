<?xml version="1.0" encoding="UTF-8"?>

<project name="htf-backend" default="build">
  <property name="package"    value="${phing.project.name}" override="true" />
  <property name="build_root" value="./_build"              override="true" />
  <property name="build_dir"  value="${build_root}/tmp"     override="true" />
  <property name="srcdir"     value="${project.basedir}"    override="true" />

  <!-- Fileset for all files -->
  <fileset dir="." id="allfiles">
    <include name="**" />
  </fileset>


  <!-- ============================================ -->
  <!-- Target: prepare                              -->
  <!-- ============================================ -->
  <target name="prepare">
    <echo msg="Making directory ${build_dir}" />
    <mkdir dir="${build_dir}" />

    <if>
      <not>
        <isset property="env" />
      </not>
      <then>
        <propertyprompt propertyName="env" defaultValue="dev" promptText="What environment do you want to build for?" />
      </then>
    </if>

    <echo msg="Loading ${env} properties" />
    <property file="./build.properties" environment="${env}" />
  </target>


  <!-- ============================================ -->
  <!-- Target: git-checkout                         -->
  <!-- ============================================ -->
  <target name="git-checkout" depends="prepare">
    <echo msg="Checking out latest code" />
    <exec command="git archive master | (cd ${build_dir}; tar x)" />
  </target>


  <!-- ============================================ -->
  <!-- Target: build                                -->
  <!-- ============================================ -->
  <target name="build" depends="git-checkout" description="builds this package">
    <echo msg="Building" />

    <!--
      Creates config/local.js by copying the template (config/local.js.dist)
      and replacing placeholders with values defined in build.properties.
     -->
    <move file="${build_dir}/config/local.js.dist" tofile="${build_dir}/config/local.js">
      <filterchain>
        <replacetokens begintoken="##" endtoken="##">
          <token key="facebook_app_secret" value="${${env}.facebook_app_secret}" />

          <token key="db.local.adapter"  value="${${env}.db.local.adapter}" />
          <token key="db.local.host"     value="${${env}.db.local.host}" />
          <token key="db.local.username" value="${${env}.db.local.username}" />
          <token key="db.local.password" value="${${env}.db.local.password}" />
          <token key="db.local.database" value="${${env}.db.local.database}" />

          <token key="db.hadra.adapter"  value="${${env}.db.hadra.adapter}" />
          <token key="db.hadra.host"     value="${${env}.db.hadra.host}" />
          <token key="db.hadra.username" value="${${env}.db.hadra.username}" />
          <token key="db.hadra.password" value="${${env}.db.hadra.password}" />
          <token key="db.hadra.database" value="${${env}.db.hadra.database}" />
        </replacetokens>
      </filterchain>
    </move>

    <!-- Done -->
    <echo msg="Built in ${build_dir}." />
  </target>

  <!-- ============================================ -->
  <!-- (DEFAULT)  Target: dist                      -->
  <!-- ============================================ -->
  <target name="deploy" depends="build" description="builds and deploys this package">
    <php function="time" returnProperty="time" />
    <property name="archive_filename" value="build-${time}.zip" />
    <property name="archive_path" value="${build_root}/${archive_filename}" />

    <echo msg="Creating archive..." />
    <zip destfile="${archive_path}">
      <fileset dir="${build_dir}">
        <include name="**/**" />
        <exclude name=".editorconfig" />
        <exclude name=".eslintignore" />
        <exclude name=".eslintrc" />
        <exclude name=".gitignore" />
        <exclude name="build.xml" />
        <exclude name="build.properties" />
      </fileset>
    </zip>

    <echo msg="Archive created: ${archive_path}" />

    <!-- Prompt for the SSH passphrase -->
    <propertyprompt
      promptText="SSH passphrase for key ${${env}.ssh.private_key}:"
      propertyName="ssh_passphrase" />
    <scp
      username="${${env}.ssh.username}"
      privkeyfile="${${env}.ssh.private_key}"
      pubkeyfile="${${env}.ssh.public_key}"
      privkeyfilepassphrase="${ssh_passphrase}"
      host="${${env}.ssh.host}"
      file="${archive_path}"
      todir="${${env}.ssh.app_dir}"
    />
    <echo>File copied, now set things up</echo>

    <!-- For readability of the script -->
    <property name="wd" value="${${env}.ssh.app_dir}" />
    <property name="bin" value="${wd}/bin" />
    <ssh
      username="${${env}.ssh.username}"
      privkeyfile="${${env}.ssh.private_key}"
      pubkeyfile="${${env}.ssh.public_key}"
      privkeyfilepassphrase="${ssh_passphrase}"
      host="${${env}.ssh.host}"
      display="true"
      failonerror="true"
      command="cd ${wd}; ${bin}/deploy ${archive_filename}"
    />
  </target>


  <!-- ============================================ -->
  <!-- Target: Rebuild                              -->
  <!-- ============================================ -->
  <target name="rebuild" description="rebuilds this package">
    <phingcall target="cleanup" />
    <phingcall target="build" />
  </target>


  <!-- ============================================ -->
  <!-- Target: Cleanup                              -->
  <!-- ============================================ -->
  <target name="cleanup" description="removes the files generated by previous builds">
    <delete dir="${build_dir}" />
  </target>

  <target name="debug">
    <foreach param="filename" absparam="absfilename" target="echo_file">
      <fileset dir="${build_dir}">
        <exclude name="node_modules/**" />
        <exclude name=".*" />
        <exclude name="Gruntfile.js" />
        <exclude name="package.json" />
        <exclude name="README.md" />
        <exclude name="build.xml" />
        <exclude name="build.properties" />
      </fileset>
    </foreach>
  </target>

  <target name="echo_file">
    <echo message="filename: ${filename}" />
  </target>
</project>
